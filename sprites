import pygame as pg
from settings import *
vec = pg.math.Vector2       # introduit le module mathvecteur2 / tou ce qui concerne la vectoriel sur 2 dimensions ( x;y)

class Player(pg.sprite.Sprite):
    def __init__(self, game):
        pg.sprite.Sprite.__init__(self)
        self.game = game
        self.image = pg.Surface((30, 40))
        self.image.fill(YELLOW)
        self.rect = self.image.get_rect()
        self.rect.center = (WIDTH / 2, HEIGHT / 2)
        self.pos = vec(WIDTH / 2, HEIGHT / 2)
        self.vel = vec(0, 0)
        self.acc = vec(0, 0)

    def jump(self):             # definition de la fonction jumper
        # Sauter seulement si debout sur une plate-forme

        hits = pg.sprite.spritecollide(self, self.game.platforms, False)
        if hits:                                # si colision alors peux sauter
            self.vel.y = jump                   # donne a la vel sur y la valeur de jump ( normalement - 20 )

    def update(self):
        self.acc = vec(0, PLAYER_GRAV)
        keys = pg.key.get_pressed()
        if keys[pg.K_LEFT]:
            self.acc.x = -PLAYER_ACC*2.5
        if keys[pg.K_RIGHT]:
            self.acc.x = PLAYER_ACC*2.5

        # application de la friction
        self.acc.x += self.vel.x * PLAYER_FRICTION
        # equations de la motion
        self.vel += self.acc
        self.pos += self.vel + 0.5 * self.acc
        # reviens des deux cote de l'Ã©cran
        if self.pos.x > WIDTH:
            self.pos.x = 0
        if self.pos.x < 0:
            self.pos.x = WIDTH

        self.rect.midbottom = self.pos

# class plateform
class Platform(pg.sprite.Sprite):
    def __init__(self, x, y, w, h):
        pg.sprite.Sprite.__init__(self)
        self.image = pg.Surface((w, h))
        self.image.fill(GREEN)
        self.rect = self.image.get_rect()
        self.rect.x = x
        self.rect.y = y

